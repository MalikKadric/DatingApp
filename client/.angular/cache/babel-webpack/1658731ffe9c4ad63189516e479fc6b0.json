{"ast":null,"code":"import { __decorate } from \"tslib\";\nmport;\n{\n  Injectable;\n}\nfrom;\n'@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { of } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { UserParams } from '../_models/userParams';\nimport { getPaginatedResult, getPaginationHeaders } from './paginationHelper';\nlet MembersService = class MembersService {\n  constructor(http, accountService) {\n    this.http = http;\n    this.accountService = accountService;\n    this.baseUrl = environment.apiUrl;\n    this.members = [];\n    this.memberCache = new Map();\n    this.accountService.currentUser$.pipe(take(1)).subscribe(user => {\n      this.user = user;\n      this.userParams = new UserParams(user);\n    });\n  }\n\n  getUserParams() {\n    return this.userParams;\n  }\n\n  setUserParams(params) {\n    this.userParams = params;\n  }\n\n  resetUserParams() {\n    this.userParams = new UserParams(this.user);\n    return this.userParams;\n  }\n\n  getMembers(userParams) {\n    var response = this.memberCache.get(Object.values(userParams).join('-'));\n\n    if (response) {\n      return of(response);\n    }\n\n    let params = getPaginationHeaders(userParams.pageNumber, userParams.pageSize);\n    params = params.append('minAge', userParams.minAge.toString());\n    params = params.append('maxAge', userParams.maxAge.toString());\n    params = params.append('gender', userParams.gender);\n    params = params.append('orderBy', userParams.orderBy);\n    return getPaginatedResult(this.baseUrl + 'users', params, this.http).pipe(map(response => {\n      this.memberCache.set(Object.values(userParams).join('-'), response);\n      return response;\n    }));\n  }\n\n  getMember(username) {\n    const member = [...this.memberCache.values()].reduce((arr, elem) => arr.concat(elem.result), []).find(member => member.username === username);\n\n    if (member) {\n      return of(member);\n    }\n\n    return this.http.get(this.baseUrl + 'users/' + username);\n  }\n\n  updateMember(member) {\n    return this.http.put(this.baseUrl + 'users', member).pipe(map(() => {\n      const index = this.members.indexOf(member);\n      this.members[index] = member;\n    }));\n  }\n\n  setMainPhoto(photoId) {\n    return this.http.put(this.baseUrl + 'users/set-main-photo/' + photoId, {});\n  }\n\n  deletePhoto(photoId) {\n    return this.http.delete(this.baseUrl + 'users/delete-photo/' + photoId);\n  }\n\n  addLike(username) {\n    return this.http.post(this.baseUrl + 'likes/' + username, {});\n  }\n\n  getLikes(predicate, pageNumber, pageSize) {\n    let params = getPaginationHeaders(pageNumber, pageSize);\n    params = params.append('predicate', predicate);\n    return getPaginatedResult(this.baseUrl + 'likes', params, this.http);\n  }\n\n};\nMembersService = __decorate([Injectable({\n  providedIn: 'root'\n})], MembersService);\nexport { MembersService };","map":null,"metadata":{},"sourceType":"module"}